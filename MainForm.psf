<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
lg5iNTU1KC4uRltbGwoKCtDQ0IC6ujoUFRXJssLCQtTX10vReyqj72gampZ+Q2U0j9raWjQ2Nr4p
KykpkfMns0GNprLS0lJUi4Y3NzfLstbWVpSVlaGysvKdsvLyclRUVMiDL82DVjj9nr6j91RGbaCD
Lv2OjA2V0QaiNtIyqYzqRO2lHhrVTVtGG5TaT22gMmqPdoNSW3XLSPSeyug77UGfymjj0zy0AYHm
TdPRsmiZtGxtGdWJ6kZ1pLpSGdWd2kBt0baT2kht1W2nKW2nsg/ZdtpG9PsPvd3JkC7c7lSWl5cn
X+kzldP3NB3Ng35Hv9cto/nTcmh5VEbLp3pQfaiM6kf1pPr+XPs8lVE9qEzbJqpTVVXVm/Wh23aq
N7XTmLZTmaG203xp/rQc3TJqu7adVKZtu7adum3XtnMpbaf5a9tJZbSeue1Lazu1809pu3afX6lt
p3pryz6ltlO96FhMx1ESjazTMXnFGwAKBgS9enp6Ijk5Ga9evZKNdXV1FRXLRUZGBjw8PGSZu7s7
srOzpeg9ldF3NA1NS7+hFUfzSE1NlSvr+fPncjofHx8kJibKleni4iI3hL+/P+Li4uRO8+zZM7lC
g4KCEB0dLTews7Oz3LBhYWGIiIiQO4Ojo6PcIagsODj4TRnNg6YJCAiQO4iTk5NcVkxMDHx9feUO
+PTpU1knWqaXl5ecNy2D6p6UlCTbQmVUP2ojtYHaSWXUNmonid5TGX1H09C09BuqP82D5kXz1Naf
lkXLpGVTHaguVCeqG9WR6kp1prpTG6gt1CZqG7WR2kptpjLayU1pO5XR8uPj4z9I21+8ePGzbHdq
58LtTm2i9Ubtpc9Urq0/7Sf0O/o9zYfmR/Ol+dNyaHlURv+w1E6qD9WL6kf1pPp+iH2e1mlKSsqK
bzuVmdp2aie3/edpu/a4YGrb6bhA/9srue1UR6W2PT09/b1tp7rSLeGp00WdVEUZgNnZWdkLpJXK
MAzDMMzSePLkiTQaNEqqKANA1+LTkC45GYZhGIZhlgaNONApV8WNAMzPz8tzLfb29pqmMAzDMAxj
LHRKgvITKHdKUQZgenpaXrpE51sYhmEYhlkalGtFiYeKOwUwNzcnXylZgmEYhmGYpUHJiYo8BUBJ
gORaKNuSYRiGYZil8fjxY3kVgeJGAOgUAF2/TpdtMAzDEHRdMx3M6AohJYrqTpdlMcxyQPcMUHQS
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
aeg3v/k/C6iAfSHm794AAAAASUVORK5CYII=</Preview>
  <Form>c2Su18LAX2QIACODCAAAAAAABADtfWtz4siy7feJmP+g8Icb5273TBvwA+870xHi4Ue38YuX3XEiJmQhbLox
YgAbu3/9rcwSkgC9qiSkEq59dvTZiZEoLWWuyszKyvrr6uGHoc+mX37/TVH+ooIyex8bf+8036cz
4/nP7mDUM+fTP0/MyTP995Pi9adPSseYTAfm6O/9P/fg/z4p1Zfh7GVi/D0yXmYTbfhJuX55GA70
b8Z7y/xpjP5+ODrSDvSDw8Jxad/YKx/vKCPtmfxyQxuM4J47iv40GPYm5Ks7VXM0m5jD6Q6OlIz1
emKOjcns3bpGfZmZTV0bGrXBszGCcZCvFopkFOSfvz4vvh12dcPsGTtfauNBxEvIkIY7X1qTFyP0
goqm/6yaQ3Oy86X7NJgZzWcCQuhV1eHAGM2ag19kWEfH+5+Uo8OD8IsIWMbbrGGMXpqzyWC8AI18
89boGwRQ3bC+qtOvEsxepvDVwo7yeXHXsJ85IdfufGkaj6ahtM8/KcfjWYRrJs8Vc9IzJs3Z+5A8
1Mngzeg1B6PHYTgY52S0rmepDEba5P2LqqoVVa2r+yr8p66eq6o5UhvqySMRq/BP7RH/BH+hf1+I
NXXlP7//5hIq+O8NvSuPbN0txh3cMt4t9pgWMtwt/pgWMrlbQk+pSty4ZYmbxC1YlrhJ3CRuVJa4
8ckSNz5Z4sYnS9z4ZIkbnyxx45MlbnyyxI1PlrjxyRI3PlnixidL3Bx5Xip3VP3y88nNWa3/1Fbn
pb2O2rg8Prmp1fq3y/Lvv61+Ekf+/Tefb1RArqDcEBY3FlnqG58sceOTPyZuhL/e2gs+Oz5pjoBL
XoFLGlMit65B/oVy2VtGfgv8RmR5ivzWLMEn18hnqqi4SX2LLkvcJG7BcgK46Ze76I29tau//wbc
YQKf9YHP7kogHwOf9R9ALrLIwG9sVyx+cRe8sbsWemfC4ib1TeIWWZa4pYHbvLTfoXx2QbijOwQu
+Qy+Uh88o7sy5bfPwC79X/hJHBn5LeAb+Ju7IPdgDDhOMXELk6W+SdyCZYlbsrhhdqyKfAa+kdYH
Lvns8Nlnm1s+o+90hLLFb65P4sjIbyu/2dnH7JkqKm5S34JliZvELWXcFv4Y8tleZ+zw1yqfhcoW
v8W4gy3f/bDWF4TFTeobhyxxk7htCjfLG1tElyPgkt9/S4SNYvGb0fCOLkXBzUuW+iZxk7hROX3c
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
b9JOJW68cghueK5ize4Mf4W5fawc8zyJO592KvktFLc7+OTE8c2rG9I3aac+ssSNT4a7nZ33n9TK
291eS20Anzn+GKs3JrydSn6LIHd+gUx7BMg+jeLYqcQtRNY7x/U5jS4xN0bXs/o/fP2xfNup5LfQ
K3SoNWuf23wm7VQEO5W4hV6BGgvRpHut0qNybEvsVPJbNNy62AGY9qCTdroiS34TDDf9dtfKhzhd
enr9j2Cnkt9CcZs552NJO40kS37LCjecb63zkMBOO9rHsVPJb/4y7jTH07AuMVuG3pm0U8lvwuLm
nChSgflXe/gQdir5LTqfdTBTSndmSjuV/MYjbxq3+WhOu/SoOOPivspyxH2V22Cnkt8i4aZjdElP
AfColZV2KvktW9zO6v2nGzhvd1RuIZ91Xu2IQu4Tl/zm4LYLn7Qgd2r1qJN2GkGW/JYabvr3z/X5
xbfHeRn181n/mHYq+S1ExuhSxzM0nb4/0k4lv4mD29vZfpvmP3Ct8upD2qnkt0hXdP8FuYJ85t8n
Q9qp5LeUccO9wmewVxj9sUv0x17tGfij2ankt1DcDMylfkU+U5n1TdophyxxC5fn0IcK51fsofho
2SlndmwL7FTyW4h8THFrvdbi1pap0k5j3VHi5pYh33Hj1JLd+5+Q9DHsVPJbNPm7Pfu1VRZ9k3a6
Lkvc+OQV3KxaWKKRJ6Chr4ze2HbaqeS30GxZw579QrpkSzvlkyVubDLqI7XTm1+gsdfSTiW/RcDt
AboKWLVlc3b9k3bKJ0vc/GSnsv8raizITk/YD2unkt9C5DeQb17p+acnSWmwtFM+WeKmWtEl5jsO
QUN3If8hzxOX/BZ2BZ53Srswtln0TdppgCxx45Mpbhgf4HniuFe4jBorzxOX/OaPG1bq4BlME9Qe
lUXfktLgj2anSd1xW3FzThy5k3Yq+S2KfExxQ++9hWdkqnE0WNopnyxxW5Ht6LLzr7RTyW9RZKfP
zy3WYqgs+ibtdEWWuCWFmx1d3rWknUp+i4Ib5h4gl9q5DIsupZ1KfguWE+uDgdEBtVMjoRPgcm6n
kt+i4QZ81rngii6lnUp+C5Z5+mDY0eWRtFPJb5HlXYpbu+zEl3E1WNqpxC1YDsbNiS5/SDuV/Bb5
DthF9tYrupR2KvktC9yc1UvsPCXtVPJbGG60SwpW7rxGji6lnUp+2yhuTnQ5knYq+S0ablg5jZXU
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
ZAgA</Form>
  <Code><![CDATA[#region Control Helper Functions
Function Connect-Exchange
{
	
	param (
		[Parameter(Mandatory = $true)]
		[string]$URL = "ex2016srv1.exchangeserverpro.net"
	)
	
	$Credentials = Get-Credential -Message "Enter your Exchange admin credentials to connect to on-premise exchange"
	
	$ExOPSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://$URL/PowerShell/ -Authentication Kerberos -Credential $Credentials
	
	Import-PSSession $ExOPSession
	
}

function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	$ADManagerReset = (Get-ItemProperty 'HKCU:\Software\CreateUserReset' | Get-ItemProperty -Name ADManager -ErrorAction SilentlyContinue).ADManager
	If ($ADManagerReset -ne 1)
	{
		$textbox_Manager.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\UserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	$groupboxADSync.ForeColor = 'White'
	$groupboxHybrid.ForeColor = 'White'
	$groupboxExchangeSetup.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelSandroSerikawaSoares.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	$groupboxADSync.ForeColor = 'Black'
	$groupboxHybrid.ForeColor = 'Black'
	$groupboxExchangeSetup.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelSandroSerikawaSoares.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Manager"
	$textbox_Manager.Text = $UserTemplate.Manager
	Add-Logs -text "LOG: Done"
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -Manager ($Manager) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $Null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -Manager ($Manager) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.Text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCHybridUser
{
	add-logs -text 'LOG: Checking DirSync option'
	
	If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$SyncServer = $textboxADSyncServer.text
		add-logs -text 'LOG: DirSync Enabled'
		add-logs -text "LOG: Running DirSync on $SyncServer"
		add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
		Try
		{
			Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		add-logs -text 'LOG: Done'
	}
	Else
	{
		add-logs -text "WARN: ADSync Server text box is empty"
		Add-Type -AssemblyName System.Windows.Forms
		[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
	}
	
	Add-Logs -text "LOG: Checking exchange connection"
	$Check = Get-ExchangeServer
	If ($Check)
	{
		Add-Logs -text "INFO: Connected to Exchange - creating the user"
		$UPN = "$($textboxUserLogonName.Text)$($comboboxDomains.SelectedItem)"
		add-logs -text "CMD: Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $($textboxHybridRemoteRouting.Text)"
		Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $textboxHybridRemoteRouting.Text
	}
	Else
	{
		add-logs -text "WARN: Not connected to Exchange / no access to Exchange module - cannot create exchange mailbox"
	}
	
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
	If ($ExchangeSetup -eq "Hybrid")
	{
		$radiobuttonHybrid.Checked = $true
	}
	ElseIf ($ExchangeSetup -eq "Cloud Only")
	{
		$radiobuttonCloudOnly.Checked = $true
	}
	Else 
	{
		$radiobuttonOther.Checked = $true
	}
	
	
	If ($checkboxconfigo365user.Checked -eq $true)
	{
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		$groupboxHybrid.Enabled = $true
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		$groupboxHybrid.Enabled = $false
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
	$comboboxActiveSync.SelectedItem = "True"
	

	$ExchangeURL = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeURL -ErrorAction SilentlyContinue).ExchangeURL
	
	$textboxexchangeserverURL.Text = $ExchangeURL
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		#Do Nothing
	}
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked = $true
	}
	
	$ADSyncServer = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ADSyncServer -ErrorAction SilentlyContinue).ADSyncServer
	$textboxADSyncServer.Text = $ADSyncServer
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
	
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Office 365 User is being created'
		Try
		{
			if ($radiobuttonHybrid.Checked -eq $true)
			{
				add-logs -text 'LOG: A Hybrid user is being created'
				New-MUCHybridUser
			}
			else
			{
				New-MUCO365User
			}
			
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		
		$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
		If ($ExchangeSetup -eq "Hybrid")
		{
			$radiobuttonHybrid.Checked = $true
		}
		ElseIf ($ExchangeSetup -eq "Cloud Only")
		{
			$radiobuttonCloudOnly.Checked = $true
		}
		Else
		{
			$radiobuttonOther.Checked = $true
		}
		
		
		
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
	
	
	If ($radiobuttonOther.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $false
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $flase
		$groupboxADSync.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $true
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
	}
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
		Invoke-Expression $CallEMS
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$radiobuttonLocal.Checked = $true
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$radiobuttonexchangeremote.Checked = $true
		}
	}
	
	
	
	
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelSandroSerikawaSoares_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/sandross89"'
	start-process -FilePath "https://www.linkedin.com/in/sandross89"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/sandross89"'
	Start-Process -FilePath "https://github.com/sandross89"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Sandro Serikawa Soares
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
}

#MANAGER
	if ($textbox_Manager.Text -eq "")
	{
		If (($Users.Manager -eq $null) -and ($textbox_Manager.Text -eq ""))
		{
			add-logs -text "Not changing the 'Manager' attribute for $($Users.Name)"
		}
		Else
		{
			add-logs -text "Clearing the 'Manager' attribute for: $($Users.Name)"
			Set-ADUser -Identity $Users.ObjectGUID -Manager $Null
		}
	}
	Else
	{
		If ($Users.Manager -eq $null)
		{
			add-logs -text "Changing $($Users.Name)'s Manager attribute to '$($textbox_Manager.Text)'"
			Set-ADUser -Identity $Users.ObjectGUID -Manager $Null
			Set-ADUser -Identity $Users.ObjectGUID -Manager $Global:Manager.objectGUID
		}
		Else
		{
			$CurrentManager = ((($Users).manager).split(",") | Select-Object -first 1).Trim("CN=")
			If ($CurrentManager -eq $textbox_Manager.Text)
			{
				add-logs -text "Not changing the 'Manager' attribute for $($Users.Name)"
			}
			Else
			{
				add-logs -text "Changing $($Users.Name)'s Manager attribute to '$($textbox_Manager.Text)'"
				Set-ADUser -Identity $Users.ObjectGUID -Manager $Null
				Set-ADUser -Identity $Users.ObjectGUID -Manager $Global:Manager.objectGUID
			}
		}
	
}

$button_Change_Click = {
	Show-ManagerSelectForm_psf
}

$button_Properties_Click = {
	If ($textbox_Manager.Text -eq "")
	{
		[System.Windows.Forms.MessageBox]::Show("No Manager has been set for the user, unable to view properties for the manager", 'Warning', 'OK', 'Warning')
	}
	Else
	{
		$Global:ManagerProperties = 1
		Show-UserPropEditor_psf
		$Global:ManagerProperties = 0
	}
}

$button_ClearManager_Click = {
	Try
	{
		$textbox_Manager.Text = $Null
	}
	Catch
	{
		[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
	}
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\UserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}

$radiobuttonHybrid_CheckedChanged={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked -eq $true
	}
	
	
}

$radiobuttonCloudOnly_CheckedChanged={
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value "Cloud Only" -Force | Out-Null
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}

	
}



$radiobuttonOther_CheckedChanged={
	If ($radiobuttonOther.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\UserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Other -Force | Out-Null
		
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	
}

$radiobuttonexchangeremote_CheckedChanged = {
	If ($radiobuttonexchangeremote.Checked -eq $true)
	{
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
}

$buttonConnectToExchange_Click={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		If ($radiobuttonexchangeremote.Checked -eq $true)
		{
			try
			{
				Connect-Exchange -URL $textboxexchangeserverURL.Text
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		Else
		{
			try
			{
				$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
				Invoke-Expression $CallEMS
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		
		
	}
	
}


$textboxEmail_FocusLeave = {
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\UserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($textboxHybridRemoteRouting.Text -ne $RemoteFWDINGDomain)
	{
		$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	}
	$EmailFirstHalf = ((($textboxEmail.Text).Split("@") | Select-Object -First 1))
	$ExistingValue = $textboxHybridRemoteRouting.Text
	$textboxHybridRemoteRouting.Text = "$EmailFirstHalf$ExistingValue"
	
}



$button1_Click={

		#TODO: Place custom script here
		$tabpageGeneral.Enabled = $true
		$tabpage1.Enabled = $true
		$tabcontrolUserProperties.Enabled = $true

}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>